###############################################################
# TASK 1: Data Understanding and Preparing
###############################################################

import datetime as dt
import pandas as pd
pd.set_option('display.max_columns', None)
# pd.set_option('display.max_rows', None)
pd.set_option('display.float_format', lambda x: '%.3f' % x)

df_ = pd.read_csv("FLOMusteriSegmentasyonu/flo_data_20k.csv")
df = df_.copy()

# First 10 observations
df.head(10)

# Variable names
df.columns

# Descriptive statistics
df.describe().T

# Null value
df.isnull().sum()

# Variable types and information about the DataFrame
df.dtypes
df.info()

# Total number of purchases by each customer
df["order_num_total"] = df["order_num_total_ever_online"] + df["order_num_total_ever_offline"]

# Total spending for each customer
df["customer_value_total"] = df["customer_value_total_ever_offline"] + df["customer_value_total_ever_online"]

# Variables representing dates: first_order_date, last_order_date, last_order_date_online, last_order_date_offline
for col in df.columns:
    if "date" in col:
        df[col]= df[col].apply(pd.to_datetime)

# Another way
contains_date =  df.columns[df.columns.str.contains("date")]
df[contains_date] = df[contains_date].apply(pd.to_datetime)

df.dtypes

df.groupby("order_channel").agg({"master_id": ["count"],
                                "order_num_total": ["sum"],
                                "customer_value_total": ["sum"]})

# Sort the top 10 customers with the highest total revenue.
df.groupby("master_id").agg({"customer_value_total": "sum"}).sort_values("customer_value_total", ascending=False).head(10)

# Sort the top 10 customers with the highest number of orders.
df.groupby("master_id").agg({"order_num_total": "sum"}).sort_values("order_num_total", ascending=False).head(10)

#Functionalize the data preparation process.
def data_prep(dataframe):
    # Total number of purchases for each customer
    dataframe["order_num_total"] = dataframe["order_num_total_ever_online"] + dataframe["order_num_total_ever_offline"]

    # Total spending for each customer
    dataframe["customer_value_total"] = dataframe["customer_value_total_ever_offline"] + dataframe["customer_value_total_ever_online"]

    # Convert object columns representing dates to datetime
    for col in dataframe.columns:
        if "date" in col:
            dataframe[col] = dataframe[col].apply(pd.to_datetime)

    return dataframe

df = df_.copy()
data_prep(df)


###############################################################
# TASK 2: Calculating RFM Metrics
###############################################################

# Recency, Frequency ve Monetary
df.head()
df["last_order_date"].max()

today_date = dt.datetime(2021, 6, 1)
type(today_date)

# Create a new RFM dataframe with customer_id, recency, frequency, and monetary values.
rfm = df.groupby('master_id').agg({'last_order_date': lambda last_order_date: (today_date - last_order_date.max()).days,
                                     'order_num_total': lambda order_num_total: order_num_total,
                                     'customer_value_total': lambda customer_value_total: customer_value_total})
rfm.head()

rfm.columns = ['recency', 'frequency', 'monetary']

rfm.describe().T
rfm.shape


###############################################################
# TASK 3: Calculating RF and RFM Scores
###############################################################

rfm["recency_score"] = pd.qcut(rfm['recency'], 5, labels=[5, 4, 3, 2, 1])
rfm["frequency_score"] = pd.qcut(rfm['frequency'].rank(method="first"), 5, labels=[1, 2, 3, 4, 5])
rfm["monetary_score"] = pd.qcut(rfm['monetary'], 5, labels=[1, 2, 3, 4, 5])

rfm["RF_SCORE"] = (rfm['recency_score'].astype(str) +
                    rfm['frequency_score'].astype(str))

rfm.describe().T

###############################################################
# TASK 4: Segment Definition of RF Scores
###############################################################
seg_map = {
    r'[1-2][1-2]': 'hibernating',
    r'[1-2][3-4]': 'at_Risk',
    r'[1-2]5': 'cant_loose',
    r'3[1-2]': 'about_to_sleep',
    r'33': 'need_attention',
    r'[3-4][4-5]': 'loyal_customers',
    r'41': 'promising',
    r'51': 'new_customers',
    r'[4-5][2-3]': 'potential_loyalists',
    r'5[4-5]': 'champions'
}
rfm['segment'] = rfm['RF_SCORE'].replace(seg_map, regex=True)

###############################################################
rfm[["segment", "recency", "frequency", "monetary"]].groupby("segment").agg(["mean", "count"])

